{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","className","type","name","id","required","htmlFor","apiKey","apiId","App","state","recipeArray","count","event","a","searchString","target","elements","value","preventDefault","fetch","apiCall","json","response","setState","hits","refreshPage","window","location","reload","checkString","href","onClick","this","map","item","recipe","label","Math","round","calories","src","image","alt","ingredients","text","url","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAceA,G,MAVF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,UAAWC,UAAU,cACvC,2BAAOC,KAAK,OAAOC,KAAK,eAAeF,UAAU,YAAYG,GAAG,eAAeC,UAAQ,IACvF,2BAAOC,QAAQ,eAAeL,UAAU,aAAxC,0BACA,4BAAQA,UAAU,gBAAlB,a,gBCCFM,EAAS,mCACTC,EAAQ,WAuGCC,E,2MAhGbC,MAAQ,CACNC,YAAa,GACbC,MAAO,M,EAMTZ,U,sCAAY,WAAOa,GAAP,mBAAAC,EAAA,4DACJC,EAAeF,EAAMG,OAAOC,SAASF,aAAaG,MACxDL,EAAMM,iBAFI,SAIYC,MAAM,mCAAD,OAAoCL,EAApC,mBAA2DP,EAA3D,oBAA4ED,IAJ7F,cAIJc,EAJI,gBAMaA,EAAQC,OANrB,OAMJC,EANI,OAOV,EAAKC,SAAS,CAACb,YAAaY,EAASE,OACrC,EAAKD,SAAS,CAACZ,MAAOW,EAASX,QARrB,0C,wDAcZc,YAAc,WACZC,OAAOC,SAASC,QAAO,I,EAKzBC,YAAc,WACZ,OAAwB,IAArB,EAAKpB,MAAME,MAGV,yBAAKX,UAAU,eACb,wBAAIA,UAAU,cAAd,+CACA,kBAAC,IAAD,CAAY8B,KAAK,OAAOC,QAAS,EAAKN,YAAazB,UAAU,aAA7D,mBAGK,EAAKS,MAAME,MAAQ,EAE1B,yBAAKX,UAAU,eACb,wBAAIA,UAAU,cAAd,sBAHC,G,wEAYC,IAAD,OACP,OACE,yBAAKA,UAAU,eAEb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,WAAWG,GAAG,OAA5B,0BACA,kBAAC,EAAD,CAAMJ,UAAWiC,KAAKjC,aAIvBiC,KAAKH,cAKJG,KAAKvB,MAAMC,YAAYuB,IAAI,SAACC,GAC5B,OACE,yBAAKlC,UAAU,WAEb,yBAAKA,UAAU,kBAEb,4BAAKkC,EAAKC,OAAOC,OACjB,wCAAcC,KAAKC,MAAMJ,EAAKC,OAAOI,UAArC,KAEA,yBAAKvC,UAAU,iBACX,yBAAKwC,IAAKN,EAAKC,OAAOM,MAAOC,IAAKR,EAAKC,OAAOC,QAC9C,wBAAIpC,UAAU,kBAAkBkC,EAAKC,OAAOQ,YAAYV,IAAI,SAAAC,GAAI,OAC9D,4BAAKA,EAAKU,UAKd,uBAAG5C,UAAU,aAAa8B,KAAMI,EAAKC,OAAOU,KAA5C,cACA,kBAAC,IAAD,CAAYf,KAAK,OAAO9B,UAAU,aAAlC,UAEA,kBAAC,IAAD,CAAY8B,KAAK,OAAOC,QAAS,EAAKN,YAAazB,UAAU,aAA7D,2B,GAtFA8C,aCHEC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ce4c4f96.chunk.js","sourcesContent":["import React from 'react';\n\n\n// search form component JSX markup below\nconst Form = props => (\n    <form onSubmit={props.getRecipe} className=\"searchForm\">\n        <input type=\"text\" name=\"searchString\" className=\"searchBar\" id=\"searchString\" required/>\n        <label htmlFor=\"searchString\" className=\"formLabel\">What's in your fridge?</label>\n        <button className=\"searchButton\">search</button>\n        \n        \n    </form>   \n);\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport AnchorLink from 'react-anchor-link-smooth-scroll'\n\n\n// importing react, Component, css link  and smooth scroll plugin from respective packages\n\n\nconst apiKey = 'd42b866f825168ee78404d7ae0353e5d';\nconst apiId = '328c4500';\n\n// setting ID and Key value for api\n// API used is from Edamam.com. Documentation can be foud here https://developer.edamam.com/edamam-docs-recipe-api\n\nclass App extends Component {\n\n  state = {\n    recipeArray: [],\n    count: null,\n\n  }\n\n  // setting state of array that receives response from API call and another element 'More' from the response which is used in error handling\n\n  getRecipe = async (event) =>{\n    const searchString = event.target.elements.searchString.value;\n    event.preventDefault();\n\n    const apiCall = await fetch(`https://api.edamam.com/search?q=${searchString}&app_id=${apiId}&app_key=${apiKey}`);\n\n    const response = await apiCall.json();\n    this.setState({recipeArray: response.hits});\n    this.setState({count: response.count});\n    \n  }\n\n  // defining a fucntion to call and receive response from API using fetch and async, await\n\n  refreshPage = () => {\n    window.location.reload(false);\n  } \n\n  // defining fucntion to refresh page on link click\n\n  checkString = () => {\n    if(this.state.count === 0){\n      return(\n      \n        <div className=\"errorHandle\">\n          <h2 className=\"statusText\">we found nothing matching that description.</h2>\n          <AnchorLink href=\"#top\" onClick={this.refreshPage} className=\"topButton\">refresh search</AnchorLink>\n        </div>\n      )\n    } else if (this.state.count > 0){\n      return (\n        <div className=\"errorHandle\">\n          <h2 className=\"statusText\">your results</h2>\n        </div>\n      )\n    }\n  }\n\n  //error handling function that allows to check if returned array is empty and show user a text accordingly\n\n  //DOM manipulation follows from here. JSX below. \n  render() {\n    return (\n      <div className=\"App wrapper\">\n\n        <div className=\"displayForm\">\n          <h1 className=\"headLine\" id=\"top\">what can i cook today?</h1>\n          <Form getRecipe={this.getRecipe}/>\n        </div>\n        {/* component linked here */}\n\n        {this.checkString()} \n        {/* checking search string received from user  */}\n        \n  \n  {/* mapping the response array to display results on Document begins below */}\n        { this.state.recipeArray.map((item) => {\n          return (\n            <div className=\"display\">\n\n              <div className=\"resultsDisplay\">\n\n                <h3>{item.recipe.label}</h3>\n                <p>Calories: {Math.round(item.recipe.calories)} </p>\n\n                <div className=\"flexContainer\">\n                    <img src={item.recipe.image} alt={item.recipe.label}/>\n                    <ul className=\"ingredientList\">{item.recipe.ingredients.map(item => (\n                      <li>{item.text}</li>\n                    ))}</ul>\n                  \n                </div>\n\n                  <a className=\"linkButton\" href={item.recipe.url}>See recipe</a>\n                  <AnchorLink href=\"#top\" className=\"topButton\">to top</AnchorLink>\n                  {/* using smooth scroll plugin here */}\n                  <AnchorLink href=\"#top\" onClick={this.refreshPage} className=\"topButton\">refresh search</AnchorLink>\n                  \n              </div>\n              \n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}