{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","className","htmlFor","type","name","id","apiKey","apiId","App","state","recipeArray","more","event","a","searchString","target","elements","value","preventDefault","fetch","apiCall","json","response","setState","hits","refreshPage","window","location","reload","checkString","this","map","item","recipe","label","calories","src","image","alt","ingredients","text","href","url","onClick","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAaeA,G,MATF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,UAAWC,UAAU,cACvC,2BAAOC,QAAQ,eAAeD,UAAU,kBAAxC,sBACA,2BAAOE,KAAK,OAAOC,KAAK,eAAeH,UAAU,YAAYI,GAAG,iBAChE,4BAAQJ,UAAU,gBAAlB,aCJFK,EAAS,mCACTC,EAAQ,WA2ECC,E,2MAtEbC,MAAQ,CACNC,YAAa,GACbC,KAAM,M,EAGRX,U,sCAAY,WAAOY,GAAP,mBAAAC,EAAA,4DACJC,EAAeF,EAAMG,OAAOC,SAASF,aAAaG,MACxDL,EAAMM,iBAFI,SAIYC,MAAM,mCAAD,OAAoCL,EAApC,mBAA2DP,EAA3D,oBAA4ED,IAJ7F,cAIJc,EAJI,gBAMaA,EAAQC,OANrB,OAMJC,EANI,OAOV,EAAKC,SAAS,CAACb,YAAaY,EAASE,OACrC,EAAKD,SAAS,CAACZ,KAAMW,EAASX,OARpB,0C,wDAYZc,YAAc,WACZC,OAAOC,SAASC,QAAO,I,EAGzBC,YAAc,WACZ,OAAuB,IAApB,EAAKpB,MAAME,KAEV,wBAAIV,UAAU,cAAd,kBAE2B,IAApB,EAAKQ,MAAME,KAElB,wBAAIV,UAAU,cAAd,qBAFG,G,wEASC,IAAD,OACP,OACE,yBAAKA,UAAU,eAEb,wBAAIA,UAAU,WAAWI,GAAG,QAA5B,iBACA,kBAAC,EAAD,CAAML,UAAW8B,KAAK9B,YAErB8B,KAAKD,cAEJC,KAAKrB,MAAMC,YAAYqB,IAAI,SAACC,GAC5B,OACE,yBAAK/B,UAAU,WACb,yBAAKA,UAAU,kBACb,4BAAK+B,EAAKC,OAAOC,OACjB,wCAAcF,EAAKC,OAAOE,SAA1B,KACA,yBAAKlC,UAAU,iBACX,yBAAKmC,IAAKJ,EAAKC,OAAOI,MAAOC,IAAKN,EAAKC,OAAOC,QAC9C,wBAAIjC,UAAU,kBAAkB+B,EAAKC,OAAOM,YAAYR,IAAI,SAAAC,GAAI,OAC9D,4BAAKA,EAAKQ,UAId,uBAAGvC,UAAU,aAAawC,KAAMT,EAAKC,OAAOS,KAA5C,cACA,uBAAGD,KAAK,OAAOxC,UAAU,aAAzB,aACA,uBAAGwC,KAAK,GAAGE,QAAS,EAAKlB,YAAaxB,UAAU,gBAAhD,2B,GA7DA2C,aCIEC,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.769ce78f.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Form = props => (\n    <form onSubmit={props.getRecipe} className=\"searchForm\">\n        <label htmlFor=\"searchString\" className=\"visuallyHidden\">Search for recipes</label>\n        <input type=\"text\" name=\"searchString\" className=\"searchBar\" id=\"searchString\"/>\n        <button className=\"searchButton\">search</button>\n        \n    </form>   \n);\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\n\nconst apiKey = 'd42b866f825168ee78404d7ae0353e5d';\nconst apiId = '328c4500';\n\n\nclass App extends Component {\n\n  state = {\n    recipeArray: [],\n    more: null,\n  }\n\n  getRecipe = async (event) =>{\n    const searchString = event.target.elements.searchString.value;\n    event.preventDefault();\n\n    const apiCall = await fetch(`https://api.edamam.com/search?q=${searchString}&app_id=${apiId}&app_key=${apiKey}`);\n\n    const response = await apiCall.json();\n    this.setState({recipeArray: response.hits});\n    this.setState({more: response.more});\n\n  }\n\n  refreshPage = () => {\n    window.location.reload(false);\n  } \n\n  checkString = () => {\n    if(this.state.more === false){\n      return(\n        <h2 className=\"statusText\">nothing found</h2>\n      )\n    } else if (this.state.more === true){\n      return (\n        <h2 className=\"statusText\">your results</h2>\n      )\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n\n        <h1 className=\"headLine\" id=\"#top\">recipe search</h1>\n        <Form getRecipe={this.getRecipe}/>\n\n        {this.checkString()}\n  \n        { this.state.recipeArray.map((item) => {\n          return (\n            <div className=\"display\">\n              <div className=\"resultsDisplay\">\n                <h3>{item.recipe.label}</h3>\n                <p>Calories: {item.recipe.calories} </p>\n                <div className=\"flexContainer\">\n                    <img src={item.recipe.image} alt={item.recipe.label}/>\n                    <ul className=\"ingredientList\">{item.recipe.ingredients.map(item => (\n                      <li>{item.text}</li>\n                    ))}</ul>\n                  \n                </div>\n                  <a className=\"linkButton\" href={item.recipe.url}>See recipe</a>\n                  <a href=\"#top\" className=\"topButton\">go to top</a>\n                  <a href=\"\" onClick={this.refreshPage} className=\"searchButton\">refresh search</a>\n                  \n            </div>\n          </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}